//Given a set of distinct integers, nums, return all possible subsets (the power set).
//
//Note: The solution set must not contain duplicate subsets.
//
//Example:
//
//Input: nums = [1,2,3]
//Output:
//[
//[3],
//[1],
//[2],
//[1,2,3],
//[1,3],
//[2,3],
//[1,2],
//[]
//]

class Solution {
    func subsets(_ nums: [Int]) -> [[Int]] {
        var output =  [[Int]]()
        output.append([])
        if nums.count == 1 {
            output.append([nums.first!])
            return output
        }
        for i in 0..<nums.count {
            let arr = Array(nums[i+1..<nums.count])
            let num = nums[i]
            output.append([num])
            createSubsetsDistinct(comb: [num], appendingElements: arr, output: &output)
        }
        return output
    }
    func createSubsetsDistinct(comb:[Int], appendingElements: [Int], output:inout [[Int]]) {
        for i in 0..<appendingElements.count {
            let num = appendingElements[i]
            var combination = comb
            let arr = Array(appendingElements[i+1..<appendingElements.count])
            combination.append(num)
            output.append(combination)
            createSubsetsDistinct(comb: combination, appendingElements: arr, output: &output)
        }
    }
}
