// Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.
// 
// Example 1:
// 
// Input: 121
// Output: true
// Example 2:
// 
// Input: -121
// Output: false
// Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
// Example 3:
//
// Input: 10
// Output: false
// Explanation: Reads 01 from right to left. Therefore it is not a palindrome.

class Solution {
    func isPalindrome(_ x: Int) -> Bool {
        var num:Int
        if x < 0 {
            return false
        } else {
            num = x
        }
        if num < 10 {return true}
        var array = String(num).flatMap{ Int(String($0)) }
        var firstArray:Array<Int>
        var secondArray:Array<Int>
        let middleIndex:Int = array.count/2
        if array.count % 2 == 0 {
            // even number of integers
            firstArray = Array(array[0..<middleIndex])
            secondArray = Array(array[middleIndex...array.count-1])
        } else {
            // odd
            firstArray = Array(array[0..<middleIndex])
            secondArray = Array(array[middleIndex+1...array.count-1])
        }
        secondArray.reverse()
        for i in 0..<middleIndex{
            if firstArray[i] != secondArray[i] {
                return false
            }
        }
        
        return true
 }
}
