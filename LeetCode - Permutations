//Given a collection of distinct integers, return all possible permutations.
//
//Example:
//
//Input: [1,2,3]
//Output:
//[
//[1,2,3],
//[1,3,2],
//[2,1,3],
//[2,3,1],
//[3,1,2],
//[3,2,1]
//]


class Solution {
    func permute(_ nums: [Int]) -> [[Int]] {
        var output =  [[Int]]()
        if nums.count == 1 {
            output.append([nums.first!])
            return output
        }
        for i in 0..<nums.count {
            var arr = nums
            arr.remove(at: i)
            createCombination(comb: [nums[i]], appendingElements: arr, output: &output, count: nums.count )
        }
        return output
    }
    func createCombination(comb:[Int], appendingElements: [Int], output:inout [[Int]], count:Int) {
        for i in 0..<appendingElements.count {
            var combination = comb
            var arr = appendingElements
            arr.remove(at: i)
            combination.append(appendingElements[i])
            if combination.count == count {
                output.append(combination)
            }
            createCombination(comb: combination, appendingElements: arr, output: &output, count: count)
        }
        
    }
}
