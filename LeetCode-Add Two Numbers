// You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
//
// You may assume the two numbers do not contain any leading zero, except the number 0 itself.
//
// Example:
//
// Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
// Output: 7 -> 0 -> 8
// Explanation: 342 + 465 = 807.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {
        guard let node1 = l1, let node2 = l2 else { return nil }
        var val = node1.val + node2.val
        var carry = val > 9 ? 1: 0
        var currentNode: ListNode? = ListNode(val % 10)
        let head = currentNode
        var x = node1.next
        var y = node2.next
        while(x != nil || y != nil) {
            val = 0
            if x != nil {
               val = x!.val
            }
            if y != nil {
               val = val + y!.val
            }
             val = val + carry
            carry = val > 9 ? 1: 0
            currentNode?.next = ListNode(val % 10)
            currentNode = currentNode?.next
            x = x?.next
            y = y?.next
        }
        if carry != 0 {
            currentNode?.next = ListNode(1)
        }
        return head
    }
}
